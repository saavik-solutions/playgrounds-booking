generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum SlotTime {
  MORNING_6_9
  MORNING_9_12
  MORNING_12_3
  EVENING_6_9
  EVENING_9_12
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique  // Optional, allowing non-unique emails for guest users
  emailVerified DateTime?  @map("email_verified")
  image         String?
  password      String?
  role          UserRole   @default(USER)
  bookings      Booking[]
  accounts      Account[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])  // Ensures unique provider account per user
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  slotId    String
  groundId  String
  date      DateTime // Date of booking
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  slot      Slot     @relation(fields: [slotId], references: [id], onDelete: Cascade)
  ground    Ground   @relation(fields: [groundId], references: [id])

  // Prevents double-booking for a user in the same slot on the same day
  @@unique([userId, date, slotId])
  @@index([groundId, date])  // Index for efficient ground and date-based queries
}

model Ground {
  id               String    @id @default(cuid())
  groundName       String
  location         String
  description      String?
  type             String
  availability     Boolean   @default(true)
  pricePerHour     Float
  rating           Float?
  totalPeopleRated Int?

  bookings         Booking[]
}

model Slot {
  id        String   @id @default(cuid())
  slotTime  SlotTime @unique  // Ensures unique slot times
  bookings  Booking[]
}

model VerificationToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime

  @@unique([email, token])  // Prevents duplicate tokens for the same email
}
